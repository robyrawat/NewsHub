<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/ComposeApplication.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/ComposeApplication.kt" />
              <option name="originalContent" value="package com.example.composedemo&#10;&#10;import android.app.Application&#10;import dagger.hilt.android.HiltAndroidApp&#10;&#10;@HiltAndroidApp&#10;class ComposeApplication : Application()" />
              <option name="updatedContent" value="package com.example.composedemo&#10;&#10;import android.app.Application&#10;import dagger.hilt.android.HiltAndroidApp&#10;&#10;@HiltAndroidApp&#10;class ComposeApplication : Application()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/di/AppModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/di/AppModule.kt" />
              <option name="originalContent" value="package com.example.composedemo.di&#10;&#10;import android.content.Context&#10;import com.example.composedemo.data.api.NewsApiService&#10;import com.example.composedemo.data.local.ArticleCache&#10;import com.example.composedemo.data.preferences.UserPreferencesManager&#10;import com.example.composedemo.util.Constants&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import okhttp3.Interceptor&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;class AppModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserPreferencesManager(@ApplicationContext context: Context): UserPreferencesManager {&#10;        return UserPreferencesManager(context)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideArticleCache(): ArticleCache {&#10;        return ArticleCache()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOkHttpClient(): OkHttpClient {&#10;        val loggingInterceptor = HttpLoggingInterceptor().apply {&#10;            level = HttpLoggingInterceptor.Level.BODY&#10;        }&#10;&#10;        val apiKeyInterceptor = Interceptor { chain -&gt;&#10;            val original = chain.request()&#10;            val originalHttpUrl = original.url&#10;&#10;            val url = originalHttpUrl.newBuilder()&#10;                .addQueryParameter(&quot;apikey&quot;, Constants.NEWS_API_KEY)&#10;                .build()&#10;&#10;            val requestBuilder = original.newBuilder()&#10;                .url(url)&#10;&#10;            val request = requestBuilder.build()&#10;            chain.proceed(request)&#10;        }&#10;&#10;        return OkHttpClient.Builder()&#10;            .addInterceptor(loggingInterceptor)&#10;            .addInterceptor(apiKeyInterceptor)&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {&#10;        return Retrofit.Builder()&#10;            .baseUrl(Constants.NEWS_API_BASE_URL)&#10;            .client(okHttpClient)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideNewsApiService(retrofit: Retrofit): NewsApiService {&#10;        return retrofit.create(NewsApiService::class.java)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.composedemo.di&#10;&#10;import android.content.Context&#10;import com.example.composedemo.data.api.NewsApiService&#10;import com.example.composedemo.data.local.ArticleCache&#10;import com.example.composedemo.data.preferences.UserPreferencesManager&#10;import com.example.composedemo.util.Constants&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import okhttp3.Interceptor&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;class AppModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserPreferencesManager(@ApplicationContext context: Context): UserPreferencesManager {&#10;        return UserPreferencesManager(context)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideArticleCache(): ArticleCache {&#10;        return ArticleCache()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOkHttpClient(): OkHttpClient {&#10;        val loggingInterceptor = HttpLoggingInterceptor().apply {&#10;            level = HttpLoggingInterceptor.Level.BODY&#10;        }&#10;&#10;        val apiKeyInterceptor = Interceptor { chain -&gt;&#10;            val original = chain.request()&#10;            val originalHttpUrl = original.url&#10;&#10;            val url = originalHttpUrl.newBuilder()&#10;                .addQueryParameter(&quot;apikey&quot;, Constants.NEWS_API_KEY)&#10;                .build()&#10;&#10;            val requestBuilder = original.newBuilder()&#10;                .url(url)&#10;&#10;            val request = requestBuilder.build()&#10;            chain.proceed(request)&#10;        }&#10;&#10;        return OkHttpClient.Builder()&#10;            .addInterceptor(loggingInterceptor)&#10;            .addInterceptor(apiKeyInterceptor)&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {&#10;        return Retrofit.Builder()&#10;            .baseUrl(Constants.NEWS_API_BASE_URL)&#10;            .client(okHttpClient)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideNewsApiService(retrofit: Retrofit): NewsApiService {&#10;        return retrofit.create(NewsApiService::class.java)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/presentation/navigation/NavGraph.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/presentation/navigation/NavGraph.kt" />
              <option name="originalContent" value="package com.example.composedemo.presentation.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.composedemo.presentation.ui.MainScreen&#10;&#10;&#10;sealed class Screens(val route: String) {&#10;    object NewsScreen : Screens(&quot;news_screen&quot;)&#10;    object ArticleScreen : Screens(&quot;category&quot;)&#10;    object ArticleDetailsScreen : Screens(&quot;article_details_screen&quot;)&#10;}&#10;@Composable&#10;fun NavGraph(navController: NavHostController, modifier: Modifier = Modifier) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = &quot;main&quot;,&#10;        modifier = modifier&#10;    ) {&#10;        composable(&quot;main&quot;) {&#10;            MainScreen()&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.composedemo.presentation.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.composedemo.presentation.ui.MainScreen&#10;&#10;&#10;sealed class Screens(val route: String) {&#10;    object NewsScreen : Screens(&quot;news_screen&quot;)&#10;    object ArticleScreen : Screens(&quot;category&quot;)&#10;    object ArticleDetailsScreen : Screens(&quot;article_details_screen&quot;)&#10;}&#10;@Composable&#10;fun NavGraph(navController: NavHostController, modifier: Modifier = Modifier) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = &quot;main&quot;,&#10;        modifier = modifier&#10;    ) {&#10;        composable(&quot;main&quot;) {&#10;            MainScreen()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/presentation/ui/EnhancedNewsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/presentation/ui/EnhancedNewsScreen.kt" />
              <option name="originalContent" value="package com.example.composedemo.presentation.ui&#10;&#10;import androidx.compose.foundation.ExperimentalFoundationApi&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.pager.HorizontalPager&#10;import androidx.compose.foundation.pager.rememberPagerState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavHostController&#10;import coil.compose.AsyncImage&#10;import coil.request.ImageRequest&#10;import com.example.composedemo.data.model.Article&#10;import com.example.composedemo.data.preferences.ThemeMode&#10;import com.example.composedemo.presentation.viewmodel.NewsViewModel&#10;import com.example.composedemo.presentation.viewmodel.SettingsViewModel&#10;import com.example.composedemo.presentation.viewmodel.SharedArticleViewModel&#10;import com.example.composedemo.presentation.navigation.Screens&#10;import com.example.composedemo.presentation.ui.components.*&#10;import com.google.accompanist.swiperefresh.SwipeRefresh&#10;import com.google.accompanist.swiperefresh.rememberSwipeRefreshState&#10;import kotlinx.coroutines.delay&#10;&#10;@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)&#10;@Composable&#10;fun EnhancedNewsScreen(&#10;    modifier: Modifier = Modifier,&#10;    newsViewModel: NewsViewModel = hiltViewModel(),&#10;    settingsViewModel: SettingsViewModel = hiltViewModel(),&#10;    sharedArticleViewModel: SharedArticleViewModel = hiltViewModel(),&#10;    navController: NavHostController&#10;) {&#10;    val newsUiState by newsViewModel.uiState.collectAsStateWithLifecycle()&#10;    val settingsUiState by settingsViewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    var viewMode by remember { mutableStateOf(ViewMode.CARD) }&#10;    var showSearch by remember { mutableStateOf(false) }&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    val strings = LanguageStrings(settingsUiState.language)&#10;    val swipeRefreshState = rememberSwipeRefreshState(newsUiState.isLoading)&#10;&#10;    // Function to handle article click&#10;    val onArticleClick: (Article) -&gt; Unit = { article -&gt;&#10;        // Set the article in shared viewmodel first&#10;        sharedArticleViewModel.setSelectedArticle(article)&#10;        // Then navigate&#10;        navController.navigate(&quot;${Screens.ArticleDetailsScreen.route}/${article.articleId}&quot;)&#10;    }&#10;&#10;    LaunchedEffect(settingsUiState.pageSize) {&#10;        // Reload news when page size changes&#10;        newsViewModel.getLatestNews(size = settingsUiState.pageSize)&#10;    }&#10;&#10;    LaunchedEffect(settingsUiState.autoRefresh) {&#10;        if (settingsUiState.autoRefresh) {&#10;            while (true) {&#10;                delay(300000) // 5 minutes&#10;                newsViewModel.getLatestNews(size = settingsUiState.pageSize)&#10;            }&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            if (showSearch) {&#10;                SearchTopBar(&#10;                    query = searchQuery,&#10;                    onQueryChange = { searchQuery = it },&#10;                    onSearch = {&#10;                        newsViewModel.searchNews(searchQuery, size = settingsUiState.pageSize)&#10;                    },&#10;                    onCloseSearch = {&#10;                        showSearch = false&#10;                        searchQuery = &quot;&quot;&#10;                        newsViewModel.getLatestNews(size = settingsUiState.pageSize)&#10;                    },&#10;                    placeholder = strings[&quot;search&quot;] ?: &quot;Search news...&quot;&#10;                )&#10;            } else {&#10;                EnhancedToolbar(&#10;                    title = strings[&quot;latest_news&quot;] ?: &quot;Latest News&quot;,&#10;                    navController = navController,&#10;                    currentLanguage = settingsUiState.language,&#10;                    currentTheme = settingsUiState.themeMode,&#10;                    onLanguageChange = { settingsViewModel.setLanguage(it) },&#10;                    onThemeChange = { settingsViewModel.setThemeMode(it) },&#10;                    onSettingsClick = {&#10;                        navController.navigate(&quot;settings&quot;)&#10;                    },&#10;                    onNotificationClick = {&#10;                        // Handle notifications&#10;                    }&#10;                ) {&#10;                    // Search button&#10;                    IconButton(onClick = { showSearch = true }) {&#10;                        Icon(&#10;                            Icons.Default.Search,&#10;                            contentDescription = strings[&quot;search&quot;],&#10;                            tint = MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;&#10;                    // View mode selector&#10;                    ViewModeSelector(&#10;                        currentMode = viewMode,&#10;                        onModeChange = { viewMode = it }&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        floatingActionButton = {&#10;            if (!newsUiState.isLoading) {&#10;                ExtendedFloatingActionButton(&#10;                    onClick = { newsViewModel.getLatestNews(size = settingsUiState.pageSize) },&#10;                    icon = { Icon(Icons.Default.Refresh, contentDescription = null) },&#10;                    text = { Text(strings[&quot;refresh&quot;] ?: &quot;Refresh&quot;) },&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        SwipeRefresh(&#10;            state = swipeRefreshState,&#10;            onRefresh = { newsViewModel.getLatestNews(size = settingsUiState.pageSize) },&#10;            modifier = Modifier.padding(innerPadding)&#10;        ) {&#10;            when {&#10;                newsUiState.isLoading &amp;&amp; newsUiState.articles.isEmpty() -&gt; {&#10;                    when (viewMode) {&#10;                        ViewMode.CARD -&gt; ShimmerHorizontalCards()&#10;                        ViewMode.LIST -&gt; ShimmerNewsList()&#10;                        ViewMode.MAGAZINE -&gt; ShimmerMagazineView()&#10;                    }&#10;                }&#10;&#10;                newsUiState.error != null -&gt; {&#10;                    EnhancedErrorCard(&#10;                        error = newsUiState.error!!,&#10;                        onRetry = { newsViewModel.getLatestNews(size = settingsUiState.pageSize) },&#10;                        strings = strings&#10;                    )&#10;                }&#10;&#10;                newsUiState.articles.isNotEmpty() -&gt; {&#10;                    when (viewMode) {&#10;                        ViewMode.CARD -&gt; {&#10;                            EnhancedSwipeableCards(&#10;                                articles = newsUiState.articles,&#10;                                textSize = settingsUiState.textSize,&#10;                                imageQuality = settingsUiState.imageQuality,&#10;                                onArticleClick = onArticleClick,&#10;                                strings = strings&#10;                            )&#10;                        }&#10;                        ViewMode.LIST -&gt; {&#10;                            EnhancedNewsListView(&#10;                                articles = newsUiState.articles,&#10;                                textSize = settingsUiState.textSize,&#10;                                imageQuality = settingsUiState.imageQuality,&#10;                                onArticleClick = onArticleClick,&#10;                                strings = strings&#10;                            )&#10;                        }&#10;                        ViewMode.MAGAZINE -&gt; {&#10;                            MagazineStyleView(&#10;                                articles = newsUiState.articles,&#10;                                textSize = settingsUiState.textSize,&#10;                                imageQuality = settingsUiState.imageQuality,&#10;                                onArticleClick = onArticleClick,&#10;                                strings = strings&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                else -&gt; {&#10;                    EmptyNewsState(&#10;                        onRefresh = { newsViewModel.getLatestNews(size = settingsUiState.pageSize) },&#10;                        strings = strings&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ViewModeSelector(&#10;    currentMode: ViewMode,&#10;    onModeChange: (ViewMode) -&gt; Unit&#10;) {&#10;    var showMenu by remember { mutableStateOf(false) }&#10;&#10;    Box {&#10;        IconButton(onClick = { showMenu = true }) {&#10;            Icon(&#10;                when (currentMode) {&#10;                    ViewMode.CARD -&gt; Icons.Default.ViewModule&#10;                    ViewMode.LIST -&gt; Icons.Default.ViewList&#10;                    ViewMode.MAGAZINE -&gt; Icons.Default.ViewQuilt&#10;                },&#10;                contentDescription = &quot;View Mode&quot;,&#10;                tint = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;&#10;        DropdownMenu(&#10;            expanded = showMenu,&#10;            onDismissRequest = { showMenu = false }&#10;        ) {&#10;            ViewMode.values().forEach { mode -&gt;&#10;                DropdownMenuItem(&#10;                    text = {&#10;                        Text(&#10;                            when (mode) {&#10;                                ViewMode.CARD -&gt; &quot;Card View&quot;&#10;                                ViewMode.LIST -&gt; &quot;List View&quot;&#10;                                ViewMode.MAGAZINE -&gt; &quot;Magazine View&quot;&#10;                            }&#10;                        )&#10;                    },&#10;                    onClick = {&#10;                        onModeChange(mode)&#10;                        showMenu = false&#10;                    },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            when (mode) {&#10;                                ViewMode.CARD -&gt; Icons.Default.ViewModule&#10;                                ViewMode.LIST -&gt; Icons.Default.ViewList&#10;                                ViewMode.MAGAZINE -&gt; Icons.Default.ViewQuilt&#10;                            },&#10;                            contentDescription = null&#10;                        )&#10;                    },&#10;                    trailingIcon = {&#10;                        if (mode == currentMode) {&#10;                            Icon(Icons.Default.Check, contentDescription = null)&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun SearchTopBar(&#10;    query: String,&#10;    onQueryChange: (String) -&gt; Unit,&#10;    onSearch: () -&gt; Unit,&#10;    onCloseSearch: () -&gt; Unit,&#10;    placeholder: String&#10;) {&#10;    TopAppBar(&#10;        title = {&#10;            OutlinedTextField(&#10;                value = query,&#10;                onValueChange = onQueryChange,&#10;                placeholder = { Text(placeholder) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                singleLine = true,&#10;                trailingIcon = {&#10;                    if (query.isNotEmpty()) {&#10;                        IconButton(onClick = { onQueryChange(&quot;&quot;) }) {&#10;                            Icon(Icons.Default.Clear, contentDescription = &quot;Clear&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        navigationIcon = {&#10;            IconButton(onClick = onCloseSearch) {&#10;                Icon(Icons.Default.ArrowBack, contentDescription = &quot;Close Search&quot;)&#10;            }&#10;        },&#10;        actions = {&#10;            IconButton(onClick = onSearch) {&#10;                Icon(Icons.Default.Search, contentDescription = &quot;Search&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.composedemo.presentation.ui&#10;&#10;import androidx.compose.foundation.ExperimentalFoundationApi&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.pager.HorizontalPager&#10;import androidx.compose.foundation.pager.rememberPagerState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavHostController&#10;import coil.compose.AsyncImage&#10;import coil.request.ImageRequest&#10;import com.example.composedemo.data.model.Article&#10;import com.example.composedemo.data.preferences.ThemeMode&#10;import com.example.composedemo.presentation.viewmodel.NewsViewModel&#10;import com.example.composedemo.presentation.viewmodel.SettingsViewModel&#10;import com.example.composedemo.presentation.viewmodel.SharedArticleViewModel&#10;import com.example.composedemo.presentation.navigation.Screens&#10;import com.example.composedemo.presentation.ui.components.*&#10;import com.google.accompanist.swiperefresh.SwipeRefresh&#10;import com.google.accompanist.swiperefresh.rememberSwipeRefreshState&#10;import kotlinx.coroutines.delay&#10;&#10;@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)&#10;@Composable&#10;fun EnhancedNewsScreen(&#10;    modifier: Modifier = Modifier,&#10;    newsViewModel: NewsViewModel = hiltViewModel(),&#10;    settingsViewModel: SettingsViewModel = hiltViewModel(),&#10;    sharedArticleViewModel: SharedArticleViewModel = hiltViewModel(),&#10;    navController: NavHostController&#10;) {&#10;    val newsUiState by newsViewModel.uiState.collectAsStateWithLifecycle()&#10;    val settingsUiState by settingsViewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    var viewMode by remember { mutableStateOf(ViewMode.CARD) }&#10;    var showSearch by remember { mutableStateOf(false) }&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    val strings = LanguageStrings(settingsUiState.language)&#10;    val swipeRefreshState = rememberSwipeRefreshState(newsUiState.isLoading)&#10;&#10;    // Function to handle article click&#10;    val onArticleClick: (Article) -&gt; Unit = { article -&gt;&#10;        // Set the article in shared viewmodel first&#10;        sharedArticleViewModel.setSelectedArticle(article)&#10;        // Then navigate&#10;        navController.navigate(&quot;${Screens.ArticleDetailsScreen.route}/${article.articleId}&quot;)&#10;    }&#10;&#10;    LaunchedEffect(settingsUiState.pageSize) {&#10;        // Reload news when page size changes&#10;        newsViewModel.getLatestNews(size = settingsUiState.pageSize)&#10;    }&#10;&#10;    LaunchedEffect(settingsUiState.autoRefresh) {&#10;        if (settingsUiState.autoRefresh) {&#10;            while (true) {&#10;                delay(300000) // 5 minutes&#10;                newsViewModel.getLatestNews(size = settingsUiState.pageSize)&#10;            }&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            if (showSearch) {&#10;                SearchTopBar(&#10;                    query = searchQuery,&#10;                    onQueryChange = { searchQuery = it },&#10;                    onSearch = {&#10;                        newsViewModel.searchNews(searchQuery, size = settingsUiState.pageSize)&#10;                    },&#10;                    onCloseSearch = {&#10;                        showSearch = false&#10;                        searchQuery = &quot;&quot;&#10;                        newsViewModel.getLatestNews(size = settingsUiState.pageSize)&#10;                    },&#10;                    placeholder = strings[&quot;search&quot;] ?: &quot;Search news...&quot;&#10;                )&#10;            } else {&#10;                EnhancedToolbar(&#10;                    title = strings[&quot;latest_news&quot;] ?: &quot;Latest News&quot;,&#10;                    navController = navController,&#10;                    currentLanguage = settingsUiState.language,&#10;                    currentTheme = settingsUiState.themeMode,&#10;                    onLanguageChange = { settingsViewModel.setLanguage(it) },&#10;                    onThemeChange = { settingsViewModel.setThemeMode(it) },&#10;                    onSettingsClick = {&#10;                        navController.navigate(&quot;settings&quot;)&#10;                    },&#10;                    onNotificationClick = {&#10;                        // Handle notifications&#10;                    }&#10;                ) {&#10;                    // Search button&#10;                    IconButton(onClick = { showSearch = true }) {&#10;                        Icon(&#10;                            Icons.Default.Search,&#10;                            contentDescription = strings[&quot;search&quot;],&#10;                            tint = MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;&#10;                    // View mode selector&#10;                    ViewModeSelector(&#10;                        currentMode = viewMode,&#10;                        onModeChange = { viewMode = it }&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        floatingActionButton = {&#10;            if (!newsUiState.isLoading) {&#10;                ExtendedFloatingActionButton(&#10;                    onClick = { newsViewModel.getLatestNews(size = settingsUiState.pageSize) },&#10;                    icon = { Icon(Icons.Default.Refresh, contentDescription = null) },&#10;                    text = { Text(strings[&quot;refresh&quot;] ?: &quot;Refresh&quot;) },&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        SwipeRefresh(&#10;            state = swipeRefreshState,&#10;            onRefresh = { newsViewModel.getLatestNews(size = settingsUiState.pageSize) },&#10;            modifier = Modifier.padding(innerPadding)&#10;        ) {&#10;            when {&#10;                newsUiState.isLoading &amp;&amp; newsUiState.articles.isEmpty() -&gt; {&#10;                    when (viewMode) {&#10;                        ViewMode.CARD -&gt; ShimmerHorizontalCards()&#10;                        ViewMode.LIST -&gt; ShimmerNewsList()&#10;                        ViewMode.MAGAZINE -&gt; ShimmerMagazineView()&#10;                    }&#10;                }&#10;&#10;                newsUiState.error != null -&gt; {&#10;                    EnhancedErrorCard(&#10;                        error = newsUiState.error!!,&#10;                        onRetry = { newsViewModel.getLatestNews(size = settingsUiState.pageSize) },&#10;                        strings = strings&#10;                    )&#10;                }&#10;&#10;                newsUiState.articles.isNotEmpty() -&gt; {&#10;                    when (viewMode) {&#10;                        ViewMode.CARD -&gt; {&#10;                            EnhancedSwipeableCards(&#10;                                articles = newsUiState.articles,&#10;                                textSize = settingsUiState.textSize,&#10;                                imageQuality = settingsUiState.imageQuality,&#10;                                onArticleClick = onArticleClick,&#10;                                strings = strings&#10;                            )&#10;                        }&#10;                        ViewMode.LIST -&gt; {&#10;                            EnhancedNewsListView(&#10;                                articles = newsUiState.articles,&#10;                                textSize = settingsUiState.textSize,&#10;                                imageQuality = settingsUiState.imageQuality,&#10;                                onArticleClick = onArticleClick,&#10;                                strings = strings&#10;                            )&#10;                        }&#10;                        ViewMode.MAGAZINE -&gt; {&#10;                            MagazineStyleView(&#10;                                articles = newsUiState.articles,&#10;                                textSize = settingsUiState.textSize,&#10;                                imageQuality = settingsUiState.imageQuality,&#10;                                onArticleClick = onArticleClick,&#10;                                strings = strings&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                else -&gt; {&#10;                    EmptyNewsState(&#10;                        onRefresh = { newsViewModel.getLatestNews(size = settingsUiState.pageSize) },&#10;                        strings = strings&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ViewModeSelector(&#10;    currentMode: ViewMode,&#10;    onModeChange: (ViewMode) -&gt; Unit&#10;) {&#10;    var showMenu by remember { mutableStateOf(false) }&#10;&#10;    Box {&#10;        IconButton(onClick = { showMenu = true }) {&#10;            Icon(&#10;                when (currentMode) {&#10;                    ViewMode.CARD -&gt; Icons.Default.ViewModule&#10;                    ViewMode.LIST -&gt; Icons.Default.ViewList&#10;                    ViewMode.MAGAZINE -&gt; Icons.Default.ViewQuilt&#10;                },&#10;                contentDescription = &quot;View Mode&quot;,&#10;                tint = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;&#10;        DropdownMenu(&#10;            expanded = showMenu,&#10;            onDismissRequest = { showMenu = false }&#10;        ) {&#10;            ViewMode.values().forEach { mode -&gt;&#10;                DropdownMenuItem(&#10;                    text = {&#10;                        Text(&#10;                            when (mode) {&#10;                                ViewMode.CARD -&gt; &quot;Card View&quot;&#10;                                ViewMode.LIST -&gt; &quot;List View&quot;&#10;                                ViewMode.MAGAZINE -&gt; &quot;Magazine View&quot;&#10;                            }&#10;                        )&#10;                    },&#10;                    onClick = {&#10;                        onModeChange(mode)&#10;                        showMenu = false&#10;                    },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            when (mode) {&#10;                                ViewMode.CARD -&gt; Icons.Default.ViewModule&#10;                                ViewMode.LIST -&gt; Icons.Default.ViewList&#10;                                ViewMode.MAGAZINE -&gt; Icons.Default.ViewQuilt&#10;                            },&#10;                            contentDescription = null&#10;                        )&#10;                    },&#10;                    trailingIcon = {&#10;                        if (mode == currentMode) {&#10;                            Icon(Icons.Default.Check, contentDescription = null)&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun SearchTopBar(&#10;    query: String,&#10;    onQueryChange: (String) -&gt; Unit,&#10;    onSearch: () -&gt; Unit,&#10;    onCloseSearch: () -&gt; Unit,&#10;    placeholder: String&#10;) {&#10;    TopAppBar(&#10;        title = {&#10;            OutlinedTextField(&#10;                value = query,&#10;                onValueChange = onQueryChange,&#10;                placeholder = { Text(placeholder) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                singleLine = true,&#10;                trailingIcon = {&#10;                    if (query.isNotEmpty()) {&#10;                        IconButton(onClick = { onQueryChange(&quot;&quot;) }) {&#10;                            Icon(Icons.Default.Clear, contentDescription = &quot;Clear&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        navigationIcon = {&#10;            IconButton(onClick = onCloseSearch) {&#10;                Icon(Icons.Default.ArrowBack, contentDescription = &quot;Close Search&quot;)&#10;            }&#10;        },&#10;        actions = {&#10;            IconButton(onClick = onSearch) {&#10;                Icon(Icons.Default.Search, contentDescription = &quot;Search&quot;)&#10;            }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/presentation/ui/InShortsStyleNewsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/presentation/ui/InShortsStyleNewsScreen.kt" />
              <option name="originalContent" value="package com.example.composedemo.presentation.ui&#10;&#10;import androidx.compose.foundation.ExperimentalFoundationApi&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.pager.HorizontalPager&#10;import androidx.compose.foundation.pager.rememberPagerState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.ViewList&#10;import androidx.compose.material.icons.filled.ViewModule&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavHostController&#10;import coil.compose.AsyncImage&#10;import coil.request.ImageRequest&#10;import com.example.composedemo.data.model.Article&#10;import com.example.composedemo.presentation.viewmodel.NewsViewModel&#10;import com.example.composedemo.presentation.navigation.Screens&#10;&#10;enum class ViewMode {&#10;    CARD, LIST&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)&#10;@Composable&#10;fun InShortsStyleNewsScreen(&#10;    modifier: Modifier = Modifier,&#10;    viewModel: NewsViewModel = hiltViewModel(),&#10;    navController: NavHostController&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    var viewMode by remember { mutableStateOf(ViewMode.CARD) }&#10;&#10;    LaunchedEffect(Unit) {&#10;        viewModel.getLatestNews()&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier.fillMaxSize()&#10;    ) {&#10;        // Top Action Bar&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp, vertical = 8.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Today's News&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            &#10;            Row {&#10;                IconButton(&#10;                    onClick = { viewMode = ViewMode.CARD }&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.ViewModule,&#10;                        contentDescription = &quot;Card View&quot;,&#10;                        tint = if (viewMode == ViewMode.CARD) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                IconButton(&#10;                    onClick = { viewMode = ViewMode.LIST }&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.ViewList,&#10;                        contentDescription = &quot;List View&quot;,&#10;                        tint = if (viewMode == ViewMode.LIST) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        when {&#10;            uiState.isLoading -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&quot;Loading latest news...&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            uiState.error != null -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    ErrorCard(&#10;                        error = uiState.error!!,&#10;                        onRetry = { viewModel.getLatestNews() }&#10;                    )&#10;                }&#10;            }&#10;&#10;            uiState.articles.isNotEmpty() -&gt; {&#10;                when (viewMode) {&#10;                    ViewMode.CARD -&gt; {&#10;                        SwipeableNewsCards(&#10;                            articles = uiState.articles,&#10;                            onArticleClick = { article -&gt;&#10;                                navController.navigate(&quot;${Screens.ArticleDetailsScreen.route}/${article.articleId}&quot;)&#10;                            }&#10;                        )&#10;                    }&#10;                    ViewMode.LIST -&gt; {&#10;                        NewsListView(&#10;                            articles = uiState.articles,&#10;                            onArticleClick = { article -&gt;&#10;                                navController.navigate(&quot;${Screens.ArticleDetailsScreen.route}/${article.articleId}&quot;)&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            else -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;No news available&quot;,&#10;                            style = MaterialTheme.typography.titleLarge&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(onClick = { viewModel.getLatestNews() }) {&#10;                            Text(&quot;Refresh&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalFoundationApi::class)&#10;@Composable&#10;private fun SwipeableNewsCards(&#10;    articles: List&lt;Article&gt;,&#10;    onArticleClick: (Article) -&gt; Unit&#10;) {&#10;    val pagerState = rememberPagerState(pageCount = { articles.size })&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        HorizontalPager(&#10;            state = pagerState,&#10;            modifier = Modifier.fillMaxSize()&#10;        ) { page -&gt;&#10;            InShortsNewsCard(&#10;                article = articles[page],&#10;                onClick = { onArticleClick(articles[page]) }&#10;            )&#10;        }&#10;&#10;        // Page indicator&#10;        Row(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            repeat(articles.size.coerceAtMost(5)) { index -&gt;&#10;                val isSelected = index == pagerState.currentPage&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(if (isSelected) 12.dp else 8.dp)&#10;                        .clip(RoundedCornerShape(6.dp))&#10;                        .background(&#10;                            if (isSelected) MaterialTheme.colorScheme.primary&#10;                            else MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.4f)&#10;                        )&#10;                )&#10;                if (index &lt; articles.size.coerceAtMost(5) - 1) {&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun InShortsNewsCard(&#10;    article: Article,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    var isFavorite by remember { mutableStateOf(false) }&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(horizontal = 16.dp, vertical = 8.dp),&#10;        onClick = onClick&#10;    ) {&#10;        Box(modifier = Modifier.fillMaxSize()) {&#10;            // Background Image&#10;            AsyncImage(&#10;                model = ImageRequest.Builder(LocalContext.current)&#10;                    .data(article.imageUrl ?: &quot;https://via.placeholder.com/800x600/E0E0E0/757575?text=No+Image&quot;)&#10;                    .crossfade(true)&#10;                    .build(),&#10;                contentDescription = article.title,&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            // Gradient overlay&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .background(&#10;                        Brush.verticalGradient(&#10;                            colors = listOf(&#10;                                Color.Transparent,&#10;                                Color.Black.copy(alpha = 0.7f)&#10;                            ),&#10;                            startY = 200f&#10;                        )&#10;                    )&#10;            )&#10;&#10;            // Content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(20.dp),&#10;                verticalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                // Top section with source and time&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.Top&#10;                ) {&#10;                    Surface(&#10;                        color = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.9f),&#10;                        shape = RoundedCornerShape(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = article.sourceId,&#10;                            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;&#10;                    IconButton(&#10;                        onClick = { isFavorite = !isFavorite }&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                            contentDescription = &quot;Favorite&quot;,&#10;                            tint = if (isFavorite) Color.Red else Color.White&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Bottom section with title and description&#10;                Column {&#10;                    Text(&#10;                        text = article.title,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White,&#10;                        maxLines = 3,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    if (!article.description.isNullOrEmpty()) {&#10;                        Text(&#10;                            text = article.description,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = Color.White.copy(alpha = 0.9f),&#10;                            maxLines = 3,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = article.pubDate,&#10;                            style = MaterialTheme.typography.labelSmall,&#10;                            color = Color.White.copy(alpha = 0.8f)&#10;                        )&#10;&#10;                        IconButton(&#10;                            onClick = { /* Handle share */ }&#10;                        ) {&#10;                            Icon(&#10;                                Icons.Default.Share,&#10;                                contentDescription = &quot;Share&quot;,&#10;                                tint = Color.White&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ErrorCard(&#10;    error: String,&#10;    onRetry: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.errorContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Oops! Something went wrong&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onErrorContainer&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            Text(&#10;                text = error,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onErrorContainer&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            Button(&#10;                onClick = onRetry,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Text(&quot;Try Again&quot;, color = Color.White)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun NewsListView(&#10;    articles: List&lt;Article&gt;,&#10;    onArticleClick: (Article) -&gt; Unit&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;        contentPadding = PaddingValues(16.dp)&#10;    ) {&#10;        items(articles) { article -&gt;&#10;            NewsListItem(&#10;                article = article,&#10;                onClick = { onArticleClick(article) }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun NewsListItem(&#10;    article: Article,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        onClick = onClick,&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(12.dp)&#10;        ) {&#10;            // Article Image&#10;            AsyncImage(&#10;                model = ImageRequest.Builder(LocalContext.current)&#10;                    .data(article.imageUrl ?: &quot;https://via.placeholder.com/150x100/E0E0E0/757575?text=No+Image&quot;)&#10;                    .crossfade(true)&#10;                    .build(),&#10;                contentDescription = article.title,&#10;                modifier = Modifier&#10;                    .size(80.dp)&#10;                    .clip(RoundedCornerShape(8.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Article Content&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = article.title,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    fontWeight = FontWeight.Bold,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                if (!article.description.isNullOrEmpty()) {&#10;                    Text(&#10;                        text = article.description,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = article.sourceId,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;&#10;                    Text(&#10;                        text = formatDate(article.pubDate),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Helper function to format date&#10;private fun formatDate(dateString: String): String {&#10;    return try {&#10;        // Simple date formatting - you can enhance this&#10;        dateString.take(10) // Just take the date part&#10;    } catch (e: Exception) {&#10;        dateString&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.composedemo.presentation.ui&#10;&#10;import androidx.compose.foundation.ExperimentalFoundationApi&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.pager.HorizontalPager&#10;import androidx.compose.foundation.pager.rememberPagerState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.ViewList&#10;import androidx.compose.material.icons.filled.ViewModule&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavHostController&#10;import coil.compose.AsyncImage&#10;import coil.request.ImageRequest&#10;import com.example.composedemo.data.model.Article&#10;import com.example.composedemo.presentation.viewmodel.NewsViewModel&#10;import com.example.composedemo.presentation.navigation.Screens&#10;&#10;enum class ViewMode {&#10;    CARD, LIST&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)&#10;@Composable&#10;fun InShortsStyleNewsScreen(&#10;    modifier: Modifier = Modifier,&#10;    viewModel: NewsViewModel = hiltViewModel(),&#10;    navController: NavHostController&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    var viewMode by remember { mutableStateOf(ViewMode.CARD) }&#10;&#10;    LaunchedEffect(Unit) {&#10;        viewModel.getLatestNews()&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier.fillMaxSize()&#10;    ) {&#10;        // Top Action Bar&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp, vertical = 8.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Today's News&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            &#10;            Row {&#10;                IconButton(&#10;                    onClick = { viewMode = ViewMode.CARD }&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.ViewModule,&#10;                        contentDescription = &quot;Card View&quot;,&#10;                        tint = if (viewMode == ViewMode.CARD) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                IconButton(&#10;                    onClick = { viewMode = ViewMode.LIST }&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.ViewList,&#10;                        contentDescription = &quot;List View&quot;,&#10;                        tint = if (viewMode == ViewMode.LIST) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        when {&#10;            uiState.isLoading -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&quot;Loading latest news...&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            uiState.error != null -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    ErrorCard(&#10;                        error = uiState.error!!,&#10;                        onRetry = { viewModel.getLatestNews() }&#10;                    )&#10;                }&#10;            }&#10;&#10;            uiState.articles.isNotEmpty() -&gt; {&#10;                when (viewMode) {&#10;                    ViewMode.CARD -&gt; {&#10;                        SwipeableNewsCards(&#10;                            articles = uiState.articles,&#10;                            onArticleClick = { article -&gt;&#10;                                navController.navigate(&quot;${Screens.ArticleDetailsScreen.route}/${article.articleId}&quot;)&#10;                            }&#10;                        )&#10;                    }&#10;                    ViewMode.LIST -&gt; {&#10;                        NewsListView(&#10;                            articles = uiState.articles,&#10;                            onArticleClick = { article -&gt;&#10;                                navController.navigate(&quot;${Screens.ArticleDetailsScreen.route}/${article.articleId}&quot;)&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            else -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;No news available&quot;,&#10;                            style = MaterialTheme.typography.titleLarge&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(onClick = { viewModel.getLatestNews() }) {&#10;                            Text(&quot;Refresh&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalFoundationApi::class)&#10;@Composable&#10;private fun SwipeableNewsCards(&#10;    articles: List&lt;Article&gt;,&#10;    onArticleClick: (Article) -&gt; Unit&#10;) {&#10;    val pagerState = rememberPagerState(pageCount = { articles.size })&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        HorizontalPager(&#10;            state = pagerState,&#10;            modifier = Modifier.fillMaxSize()&#10;        ) { page -&gt;&#10;            InShortsNewsCard(&#10;                article = articles[page],&#10;                onClick = { onArticleClick(articles[page]) }&#10;            )&#10;        }&#10;&#10;        // Page indicator&#10;        Row(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            repeat(articles.size.coerceAtMost(5)) { index -&gt;&#10;                val isSelected = index == pagerState.currentPage&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(if (isSelected) 12.dp else 8.dp)&#10;                        .clip(RoundedCornerShape(6.dp))&#10;                        .background(&#10;                            if (isSelected) MaterialTheme.colorScheme.primary&#10;                            else MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.4f)&#10;                        )&#10;                )&#10;                if (index &lt; articles.size.coerceAtMost(5) - 1) {&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun InShortsNewsCard(&#10;    article: Article,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    var isFavorite by remember { mutableStateOf(false) }&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(horizontal = 16.dp, vertical = 8.dp),&#10;        onClick = onClick&#10;    ) {&#10;        Box(modifier = Modifier.fillMaxSize()) {&#10;            // Background Image&#10;            AsyncImage(&#10;                model = ImageRequest.Builder(LocalContext.current)&#10;                    .data(article.imageUrl ?: &quot;https://via.placeholder.com/800x600/E0E0E0/757575?text=No+Image&quot;)&#10;                    .crossfade(true)&#10;                    .build(),&#10;                contentDescription = article.title,&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            // Gradient overlay&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .background(&#10;                        Brush.verticalGradient(&#10;                            colors = listOf(&#10;                                Color.Transparent,&#10;                                Color.Black.copy(alpha = 0.7f)&#10;                            ),&#10;                            startY = 200f&#10;                        )&#10;                    )&#10;            )&#10;&#10;            // Content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(20.dp),&#10;                verticalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                // Top section with source and time&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.Top&#10;                ) {&#10;                    Surface(&#10;                        color = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.9f),&#10;                        shape = RoundedCornerShape(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = article.sourceId,&#10;                            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;&#10;                    IconButton(&#10;                        onClick = { isFavorite = !isFavorite }&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                            contentDescription = &quot;Favorite&quot;,&#10;                            tint = if (isFavorite) Color.Red else Color.White&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Bottom section with title and description&#10;                Column {&#10;                    Text(&#10;                        text = article.title,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White,&#10;                        maxLines = 3,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    if (!article.description.isNullOrEmpty()) {&#10;                        Text(&#10;                            text = article.description,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = Color.White.copy(alpha = 0.9f),&#10;                            maxLines = 3,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = article.pubDate,&#10;                            style = MaterialTheme.typography.labelSmall,&#10;                            color = Color.White.copy(alpha = 0.8f)&#10;                        )&#10;&#10;                        IconButton(&#10;                            onClick = { /* Handle share */ }&#10;                        ) {&#10;                            Icon(&#10;                                Icons.Default.Share,&#10;                                contentDescription = &quot;Share&quot;,&#10;                                tint = Color.White&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ErrorCard(&#10;    error: String,&#10;    onRetry: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.errorContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Oops! Something went wrong&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onErrorContainer&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            Text(&#10;                text = error,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onErrorContainer&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            Button(&#10;                onClick = onRetry,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Text(&quot;Try Again&quot;, color = Color.White)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun NewsListView(&#10;    articles: List&lt;Article&gt;,&#10;    onArticleClick: (Article) -&gt; Unit&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;        contentPadding = PaddingValues(16.dp)&#10;    ) {&#10;        items(articles) { article -&gt;&#10;            NewsListItem(&#10;                article = article,&#10;                onClick = { onArticleClick(article) }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun NewsListItem(&#10;    article: Article,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        onClick = onClick,&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(12.dp)&#10;        ) {&#10;            // Article Image&#10;            AsyncImage(&#10;                model = ImageRequest.Builder(LocalContext.current)&#10;                    .data(article.imageUrl ?: &quot;https://via.placeholder.com/150x100/E0E0E0/757575?text=No+Image&quot;)&#10;                    .crossfade(true)&#10;                    .build(),&#10;                contentDescription = article.title,&#10;                modifier = Modifier&#10;                    .size(80.dp)&#10;                    .clip(RoundedCornerShape(8.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Article Content&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = article.title,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    fontWeight = FontWeight.Bold,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                if (!article.description.isNullOrEmpty()) {&#10;                    Text(&#10;                        text = article.description,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = article.sourceId,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;&#10;                    Text(&#10;                        text = formatDate(article.pubDate),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Helper function to format date&#10;private fun formatDate(dateString: String): String {&#10;    return try {&#10;        // Simple date formatting - you can enhance this&#10;        dateString.take(10) // Just take the date part&#10;    } catch (e: Exception) {&#10;        dateString&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/presentation/ui/SettingsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/presentation/ui/SettingsScreen.kt" />
              <option name="originalContent" value="package com.example.composedemo.presentation.ui&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.selection.selectable&#10;import androidx.compose.foundation.selection.selectableGroup&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.semantics.Role&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavHostController&#10;import com.example.composedemo.data.preferences.ThemeMode&#10;import com.example.composedemo.presentation.viewmodel.SettingsViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SettingsScreen(&#10;    navController: NavHostController,&#10;    viewModel: SettingsViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    // Get localized strings based on current language&#10;    val isHindi = uiState.language == &quot;hi&quot;&#10;    val strings = if (isHindi) {&#10;        mapOf(&#10;            &quot;settings&quot; to &quot;सेटिंग्स&quot;,&#10;            &quot;language&quot; to &quot;भाषा&quot;,&#10;            &quot;theme&quot; to &quot;थीम&quot;,&#10;            &quot;articles_per_page&quot; to &quot;प्रति पृष्ठ लेख&quot;,&#10;            &quot;auto_refresh&quot; to &quot;स्वचालित रीफ्रेश&quot;,&#10;            &quot;auto_refresh_desc&quot; to &quot;हर 5 मिनट में समाचार अपडेट करें&quot;&#10;        )&#10;    } else {&#10;        mapOf(&#10;            &quot;settings&quot; to &quot;Settings&quot;,&#10;            &quot;language&quot; to &quot;Language&quot;,&#10;            &quot;theme&quot; to &quot;Theme&quot;,&#10;            &quot;articles_per_page&quot; to &quot;Articles Per Page&quot;,&#10;            &quot;auto_refresh&quot; to &quot;Auto Refresh&quot;,&#10;            &quot;auto_refresh_desc&quot; to &quot;Automatically refresh news every 5 minutes&quot;&#10;        )&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(strings[&quot;settings&quot;] ?: &quot;Settings&quot;) },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary,&#10;                    titleContentColor = MaterialTheme.colorScheme.onPrimary&#10;                )&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Current Settings Info&#10;            item {&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Column(modifier = Modifier.padding(16.dp)) {&#10;                        Text(&#10;                            text = if (isHindi) &quot;वर्तमान सेटिंग्स&quot; else &quot;Current Settings&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = &quot;Language: ${if (uiState.language == &quot;hi&quot;) &quot;हिंदी&quot; else &quot;English&quot;}&quot;,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                        Text(&#10;                            text = &quot;Theme: ${uiState.themeMode.name}&quot;,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                        Text(&#10;                            text = &quot;Page Size: ${uiState.pageSize} articles&quot;,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                        Text(&#10;                            text = &quot;Auto Refresh: ${if (uiState.autoRefresh) &quot;ON&quot; else &quot;OFF&quot;}&quot;,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Language Settings&#10;            item {&#10;                Card {&#10;                    Column(modifier = Modifier.padding(16.dp)) {&#10;                        Text(&#10;                            text = strings[&quot;language&quot;] ?: &quot;Language&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        Column(modifier = Modifier.selectableGroup()) {&#10;                            listOf(&quot;en&quot; to &quot; English&quot;, &quot;hi&quot; to &quot; हिंदी&quot;).forEach { (code, name) -&gt;&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .selectable(&#10;                                            selected = (code == uiState.language),&#10;                                            onClick = {&#10;                                                viewModel.setLanguage(code)&#10;                                                println(&quot;Settings: Language changed to $code&quot;)&#10;                                            },&#10;                                            role = Role.RadioButton&#10;                                        )&#10;                                        .padding(vertical = 8.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    RadioButton(&#10;                                        selected = (code == uiState.language),&#10;                                        onClick = null&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(8.dp))&#10;                                    Text(text = name, style = MaterialTheme.typography.bodyLarge)&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Theme Settings&#10;            item {&#10;                Card {&#10;                    Column(modifier = Modifier.padding(16.dp)) {&#10;                        Text(&#10;                            text = strings[&quot;theme&quot;] ?: &quot;Theme&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        Column(modifier = Modifier.selectableGroup()) {&#10;                            ThemeMode.values().forEach { theme -&gt;&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .selectable(&#10;                                            selected = (theme == uiState.themeMode),&#10;                                            onClick = {&#10;                                                viewModel.setThemeMode(theme)&#10;                                                println(&quot;Settings: Theme changed to ${theme.name}&quot;)&#10;                                            },&#10;                                            role = Role.RadioButton&#10;                                        )&#10;                                        .padding(vertical = 8.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    RadioButton(&#10;                                        selected = (theme == uiState.themeMode),&#10;                                        onClick = null&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(8.dp))&#10;                                    Icon(&#10;                                        imageVector = when (theme) {&#10;                                            ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                                            ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                                            ThemeMode.SYSTEM -&gt; Icons.Default.Brightness6&#10;                                        },&#10;                                        contentDescription = null,&#10;                                        modifier = Modifier.size(20.dp)&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(8.dp))&#10;                                    Text(&#10;                                        text = when (theme) {&#10;                                            ThemeMode.LIGHT -&gt; if (isHindi) &quot;हल्का&quot; else &quot;Light&quot;&#10;                                            ThemeMode.DARK -&gt; if (isHindi) &quot;गहरा&quot; else &quot;Dark&quot;&#10;                                            ThemeMode.SYSTEM -&gt; if (isHindi) &quot;सिस्टम डिफ़ॉल्ट&quot; else &quot;System Default&quot;&#10;                                        },&#10;                                        style = MaterialTheme.typography.bodyLarge&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Page Size Settings&#10;            item {&#10;                Card {&#10;                    Column(modifier = Modifier.padding(16.dp)) {&#10;                        Text(&#10;                            text = strings[&quot;articles_per_page&quot;] ?: &quot;Articles Per Page&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        Column(modifier = Modifier.selectableGroup()) {&#10;                            listOf(5, 10, 15, 20).forEach { size -&gt;&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .selectable(&#10;                                            selected = (size == uiState.pageSize),&#10;                                            onClick = {&#10;                                                viewModel.setPageSize(size)&#10;                                                println(&quot;Settings: Page size changed to $size&quot;)&#10;                                            },&#10;                                            role = Role.RadioButton&#10;                                        )&#10;                                        .padding(vertical = 8.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    RadioButton(&#10;                                        selected = (size == uiState.pageSize),&#10;                                        onClick = null&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(8.dp))&#10;                                    Text(&#10;                                        text = &quot;$size ${if (isHindi) &quot;लेख&quot; else &quot;articles&quot;}&quot;,&#10;                                        style = MaterialTheme.typography.bodyLarge&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Auto Refresh&#10;            item {&#10;                Card {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(16.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Icon(Icons.Default.Refresh, contentDescription = null)&#10;                        Spacer(modifier = Modifier.width(12.dp))&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = strings[&quot;auto_refresh&quot;] ?: &quot;Auto Refresh&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                            Text(&#10;                                text = strings[&quot;auto_refresh_desc&quot;] ?: &quot;Automatically refresh news every 5 minutes&quot;,&#10;                                style = MaterialTheme.typography.bodySmall,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                        Switch(&#10;                            checked = uiState.autoRefresh,&#10;                            onCheckedChange = {&#10;                                viewModel.setAutoRefresh(it)&#10;                                println(&quot;Settings: Auto refresh changed to $it&quot;)&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.composedemo.presentation.ui&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.selection.selectable&#10;import androidx.compose.foundation.selection.selectableGroup&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.semantics.Role&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavHostController&#10;import com.example.composedemo.data.preferences.ThemeMode&#10;import com.example.composedemo.presentation.viewmodel.SettingsViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SettingsScreen(&#10;    navController: NavHostController,&#10;    viewModel: SettingsViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    // Get localized strings based on current language&#10;    val isHindi = uiState.language == &quot;hi&quot;&#10;    val strings = if (isHindi) {&#10;        mapOf(&#10;            &quot;settings&quot; to &quot;सेटिंग्स&quot;,&#10;            &quot;language&quot; to &quot;भाषा&quot;,&#10;            &quot;theme&quot; to &quot;थीम&quot;,&#10;            &quot;articles_per_page&quot; to &quot;प्रति पृष्ठ लेख&quot;,&#10;            &quot;auto_refresh&quot; to &quot;स्वचालित रीफ्रेश&quot;,&#10;            &quot;auto_refresh_desc&quot; to &quot;हर 5 मिनट में समाचार अपडेट करें&quot;&#10;        )&#10;    } else {&#10;        mapOf(&#10;            &quot;settings&quot; to &quot;Settings&quot;,&#10;            &quot;language&quot; to &quot;Language&quot;,&#10;            &quot;theme&quot; to &quot;Theme&quot;,&#10;            &quot;articles_per_page&quot; to &quot;Articles Per Page&quot;,&#10;            &quot;auto_refresh&quot; to &quot;Auto Refresh&quot;,&#10;            &quot;auto_refresh_desc&quot; to &quot;Automatically refresh news every 5 minutes&quot;&#10;        )&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(strings[&quot;settings&quot;] ?: &quot;Settings&quot;) },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary,&#10;                    titleContentColor = MaterialTheme.colorScheme.onPrimary&#10;                )&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Current Settings Info&#10;            item {&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Column(modifier = Modifier.padding(16.dp)) {&#10;                        Text(&#10;                            text = if (isHindi) &quot;वर्तमान सेटिंग्स&quot; else &quot;Current Settings&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = &quot;Language: ${if (uiState.language == &quot;hi&quot;) &quot;हिंदी&quot; else &quot;English&quot;}&quot;,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                        Text(&#10;                            text = &quot;Theme: ${uiState.themeMode.name}&quot;,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                        Text(&#10;                            text = &quot;Page Size: ${uiState.pageSize} articles&quot;,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                        Text(&#10;                            text = &quot;Auto Refresh: ${if (uiState.autoRefresh) &quot;ON&quot; else &quot;OFF&quot;}&quot;,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Language Settings&#10;            item {&#10;                Card {&#10;                    Column(modifier = Modifier.padding(16.dp)) {&#10;                        Text(&#10;                            text = strings[&quot;language&quot;] ?: &quot;Language&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        Column(modifier = Modifier.selectableGroup()) {&#10;                            listOf(&quot;en&quot; to &quot; English&quot;, &quot;hi&quot; to &quot; हिंदी&quot;).forEach { (code, name) -&gt;&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .selectable(&#10;                                            selected = (code == uiState.language),&#10;                                            onClick = {&#10;                                                viewModel.setLanguage(code)&#10;                                                println(&quot;Settings: Language changed to $code&quot;)&#10;                                            },&#10;                                            role = Role.RadioButton&#10;                                        )&#10;                                        .padding(vertical = 8.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    RadioButton(&#10;                                        selected = (code == uiState.language),&#10;                                        onClick = null&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(8.dp))&#10;                                    Text(text = name, style = MaterialTheme.typography.bodyLarge)&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Theme Settings&#10;            item {&#10;                Card {&#10;                    Column(modifier = Modifier.padding(16.dp)) {&#10;                        Text(&#10;                            text = strings[&quot;theme&quot;] ?: &quot;Theme&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        Column(modifier = Modifier.selectableGroup()) {&#10;                            ThemeMode.values().forEach { theme -&gt;&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .selectable(&#10;                                            selected = (theme == uiState.themeMode),&#10;                                            onClick = {&#10;                                                viewModel.setThemeMode(theme)&#10;                                                println(&quot;Settings: Theme changed to ${theme.name}&quot;)&#10;                                            },&#10;                                            role = Role.RadioButton&#10;                                        )&#10;                                        .padding(vertical = 8.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    RadioButton(&#10;                                        selected = (theme == uiState.themeMode),&#10;                                        onClick = null&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(8.dp))&#10;                                    Icon(&#10;                                        imageVector = when (theme) {&#10;                                            ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                                            ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                                            ThemeMode.SYSTEM -&gt; Icons.Default.Brightness6&#10;                                        },&#10;                                        contentDescription = null,&#10;                                        modifier = Modifier.size(20.dp)&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(8.dp))&#10;                                    Text(&#10;                                        text = when (theme) {&#10;                                            ThemeMode.LIGHT -&gt; if (isHindi) &quot;हल्का&quot; else &quot;Light&quot;&#10;                                            ThemeMode.DARK -&gt; if (isHindi) &quot;गहरा&quot; else &quot;Dark&quot;&#10;                                            ThemeMode.SYSTEM -&gt; if (isHindi) &quot;सिस्टम डिफ़ॉल्ट&quot; else &quot;System Default&quot;&#10;                                        },&#10;                                        style = MaterialTheme.typography.bodyLarge&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Page Size Settings&#10;            item {&#10;                Card {&#10;                    Column(modifier = Modifier.padding(16.dp)) {&#10;                        Text(&#10;                            text = strings[&quot;articles_per_page&quot;] ?: &quot;Articles Per Page&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        Column(modifier = Modifier.selectableGroup()) {&#10;                            listOf(5, 10, 15, 20).forEach { size -&gt;&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .selectable(&#10;                                            selected = (size == uiState.pageSize),&#10;                                            onClick = {&#10;                                                viewModel.setPageSize(size)&#10;                                                println(&quot;Settings: Page size changed to $size&quot;)&#10;                                            },&#10;                                            role = Role.RadioButton&#10;                                        )&#10;                                        .padding(vertical = 8.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    RadioButton(&#10;                                        selected = (size == uiState.pageSize),&#10;                                        onClick = null&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(8.dp))&#10;                                    Text(&#10;                                        text = &quot;$size ${if (isHindi) &quot;लेख&quot; else &quot;articles&quot;}&quot;,&#10;                                        style = MaterialTheme.typography.bodyLarge&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Auto Refresh&#10;            item {&#10;                Card {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(16.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Icon(Icons.Default.Refresh, contentDescription = null)&#10;                        Spacer(modifier = Modifier.width(12.dp))&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = strings[&quot;auto_refresh&quot;] ?: &quot;Auto Refresh&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                            Text(&#10;                                text = strings[&quot;auto_refresh_desc&quot;] ?: &quot;Automatically refresh news every 5 minutes&quot;,&#10;                                style = MaterialTheme.typography.bodySmall,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                        Switch(&#10;                            checked = uiState.autoRefresh,&#10;                            onCheckedChange = {&#10;                                viewModel.setAutoRefresh(it)&#10;                                println(&quot;Settings: Auto refresh changed to $it&quot;)&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/presentation/ui/SimpleCategoryScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/presentation/ui/SimpleCategoryScreen.kt" />
              <option name="originalContent" value="package com.example.composedemo.presentation.ui&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavHostController&#10;import com.example.composedemo.presentation.viewmodel.CategoryViewModel&#10;import com.example.composedemo.presentation.viewmodel.SettingsViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SimpleCategoryScreen(&#10;    navController: NavHostController,&#10;    viewModel: CategoryViewModel = hiltViewModel(),&#10;    settingsViewModel: SettingsViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val settingsUiState by settingsViewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    // Get localized strings&#10;    val isHindi = settingsUiState.language == &quot;hi&quot;&#10;    val strings = if (isHindi) {&#10;        mapOf(&#10;            &quot;categories&quot; to &quot;श्रेणियां&quot;,&#10;            &quot;search_categories&quot; to &quot;श्रेणियां खोजें&quot;,&#10;            &quot;loading&quot; to &quot;लोड हो रहा है...&quot;,&#10;            &quot;error&quot; to &quot;त्रुटि&quot;,&#10;            &quot;retry&quot; to &quot;पुनः प्रयास करें&quot;,&#10;            &quot;no_news&quot; to &quot;कोई समाचार उपलब्ध नहीं&quot;,&#10;            &quot;news&quot; to &quot;समाचार&quot;&#10;        )&#10;    } else {&#10;        mapOf(&#10;            &quot;categories&quot; to &quot;Categories&quot;,&#10;            &quot;search_categories&quot; to &quot;Search categories&quot;,&#10;            &quot;loading&quot; to &quot;Loading...&quot;,&#10;            &quot;error&quot; to &quot;Error&quot;,&#10;            &quot;retry&quot; to &quot;Retry&quot;,&#10;            &quot;no_news&quot; to &quot;No news available&quot;,&#10;            &quot;news&quot; to &quot;News&quot;&#10;        )&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(strings[&quot;categories&quot;] ?: &quot;Categories&quot;) },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary,&#10;                    titleContentColor = MaterialTheme.colorScheme.onPrimary&#10;                )&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        if (uiState.selectedCategory != null) {&#10;            // Show category news&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(innerPadding)&#10;                    .padding(16.dp)&#10;            ) {&#10;                // Back button and category title&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    IconButton(onClick = { viewModel.clearCategoryNews() }) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                    Text(&#10;                        text = &quot;${uiState.selectedCategory!!.replaceFirstChar { it.uppercase() }} ${strings[&quot;news&quot;]}&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                when {&#10;                    uiState.isLoading -&gt; {&#10;                        Box(&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Column(&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                CircularProgressIndicator()&#10;                                Spacer(modifier = Modifier.height(16.dp))&#10;                                Text(strings[&quot;loading&quot;] ?: &quot;Loading...&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    uiState.error != null -&gt; {&#10;                        Card(&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.errorContainer&#10;                            )&#10;                        ) {&#10;                            Column(modifier = Modifier.padding(16.dp)) {&#10;                                Text(&#10;                                    text = &quot;${strings[&quot;error&quot;]} loading ${uiState.selectedCategory} ${strings[&quot;news&quot;]}&quot;,&#10;                                    style = MaterialTheme.typography.titleMedium,&#10;                                    color = MaterialTheme.colorScheme.onErrorContainer&#10;                                )&#10;                                Text(&#10;                                    text = uiState.error!!,&#10;                                    color = MaterialTheme.colorScheme.onErrorContainer&#10;                                )&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                Button(onClick = { viewModel.getNewsByCategory(uiState.selectedCategory!!) }) {&#10;                                    Text(strings[&quot;retry&quot;] ?: &quot;Retry&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    uiState.categoryNews.isNotEmpty() -&gt; {&#10;                        LazyColumn(&#10;                            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            items(uiState.categoryNews) { article -&gt;&#10;                                NewsCard(&#10;                                    article = article,&#10;                                    onClick = {&#10;                                        navController.currentBackStackEntry?.savedStateHandle?.set(&quot;selected_article&quot;, article)&#10;                                        navController.navigate(&quot;article_details/${article.articleId}&quot;)&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    else -&gt; {&#10;                        Box(&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Text(strings[&quot;no_news&quot;] ?: &quot;No news available&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } else {&#10;            // Show categories list&#10;            LazyColumn(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(innerPadding)&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                item {&#10;                    OutlinedTextField(&#10;                        value = uiState.searchQuery,&#10;                        onValueChange = { viewModel.searchCategories(it) },&#10;                        label = { Text(strings[&quot;search_categories&quot;] ?: &quot;Search categories&quot;) },&#10;                        leadingIcon = { Icon(Icons.Default.Search, contentDescription = &quot;Search&quot;) },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        singleLine = true&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                }&#10;&#10;                items(uiState.categories) { category -&gt;&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        onClick = { viewModel.getNewsByCategory(category) },&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = category.replaceFirstChar { it.uppercase() },&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Medium,&#10;                                modifier = Modifier.weight(1f)&#10;                            )&#10;                            Icon(&#10;                                Icons.Default.ChevronRight,&#10;                                contentDescription = &quot;View category&quot;&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.composedemo.presentation.ui&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavHostController&#10;import com.example.composedemo.presentation.viewmodel.CategoryViewModel&#10;import com.example.composedemo.presentation.viewmodel.SettingsViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SimpleCategoryScreen(&#10;    navController: NavHostController,&#10;    viewModel: CategoryViewModel = hiltViewModel(),&#10;    settingsViewModel: SettingsViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val settingsUiState by settingsViewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    // Get localized strings&#10;    val isHindi = settingsUiState.language == &quot;hi&quot;&#10;    val strings = if (isHindi) {&#10;        mapOf(&#10;            &quot;categories&quot; to &quot;श्रेणियां&quot;,&#10;            &quot;search_categories&quot; to &quot;श्रेणियां खोजें&quot;,&#10;            &quot;loading&quot; to &quot;लोड हो रहा है...&quot;,&#10;            &quot;error&quot; to &quot;त्रुटि&quot;,&#10;            &quot;retry&quot; to &quot;पुनः प्रयास करें&quot;,&#10;            &quot;no_news&quot; to &quot;कोई समाचार उपलब्ध नहीं&quot;,&#10;            &quot;news&quot; to &quot;समाचार&quot;&#10;        )&#10;    } else {&#10;        mapOf(&#10;            &quot;categories&quot; to &quot;Categories&quot;,&#10;            &quot;search_categories&quot; to &quot;Search categories&quot;,&#10;            &quot;loading&quot; to &quot;Loading...&quot;,&#10;            &quot;error&quot; to &quot;Error&quot;,&#10;            &quot;retry&quot; to &quot;Retry&quot;,&#10;            &quot;no_news&quot; to &quot;No news available&quot;,&#10;            &quot;news&quot; to &quot;News&quot;&#10;        )&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(strings[&quot;categories&quot;] ?: &quot;Categories&quot;) },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary,&#10;                    titleContentColor = MaterialTheme.colorScheme.onPrimary&#10;                )&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        if (uiState.selectedCategory != null) {&#10;            // Show category news&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(innerPadding)&#10;                    .padding(16.dp)&#10;            ) {&#10;                // Back button and category title&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    IconButton(onClick = { viewModel.clearCategoryNews() }) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                    Text(&#10;                        text = &quot;${uiState.selectedCategory!!.replaceFirstChar { it.uppercase() }} ${strings[&quot;news&quot;]}&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                when {&#10;                    uiState.isLoading -&gt; {&#10;                        Box(&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Column(&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                CircularProgressIndicator()&#10;                                Spacer(modifier = Modifier.height(16.dp))&#10;                                Text(strings[&quot;loading&quot;] ?: &quot;Loading...&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    uiState.error != null -&gt; {&#10;                        Card(&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.errorContainer&#10;                            )&#10;                        ) {&#10;                            Column(modifier = Modifier.padding(16.dp)) {&#10;                                Text(&#10;                                    text = &quot;${strings[&quot;error&quot;]} loading ${uiState.selectedCategory} ${strings[&quot;news&quot;]}&quot;,&#10;                                    style = MaterialTheme.typography.titleMedium,&#10;                                    color = MaterialTheme.colorScheme.onErrorContainer&#10;                                )&#10;                                Text(&#10;                                    text = uiState.error!!,&#10;                                    color = MaterialTheme.colorScheme.onErrorContainer&#10;                                )&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                Button(onClick = { viewModel.getNewsByCategory(uiState.selectedCategory!!) }) {&#10;                                    Text(strings[&quot;retry&quot;] ?: &quot;Retry&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    uiState.categoryNews.isNotEmpty() -&gt; {&#10;                        LazyColumn(&#10;                            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            items(uiState.categoryNews) { article -&gt;&#10;                                NewsCard(&#10;                                    article = article,&#10;                                    onClick = {&#10;                                        navController.currentBackStackEntry?.savedStateHandle?.set(&quot;selected_article&quot;, article)&#10;                                        navController.navigate(&quot;article_details/${article.articleId}&quot;)&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    else -&gt; {&#10;                        Box(&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Text(strings[&quot;no_news&quot;] ?: &quot;No news available&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } else {&#10;            // Show categories list&#10;            LazyColumn(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(innerPadding)&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                item {&#10;                    OutlinedTextField(&#10;                        value = uiState.searchQuery,&#10;                        onValueChange = { viewModel.searchCategories(it) },&#10;                        label = { Text(strings[&quot;search_categories&quot;] ?: &quot;Search categories&quot;) },&#10;                        leadingIcon = { Icon(Icons.Default.Search, contentDescription = &quot;Search&quot;) },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        singleLine = true&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                }&#10;&#10;                items(uiState.categories) { category -&gt;&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        onClick = { viewModel.getNewsByCategory(category) },&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = category.replaceFirstChar { it.uppercase() },&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Medium,&#10;                                modifier = Modifier.weight(1f)&#10;                            )&#10;                            Icon(&#10;                                Icons.Default.ChevronRight,&#10;                                contentDescription = &quot;View category&quot;&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/presentation/ui/SimpleWorkingNewsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/presentation/ui/SimpleWorkingNewsScreen.kt" />
              <option name="originalContent" value="package com.example.composedemo.presentation.ui&#10;&#10;import android.content.Intent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavHostController&#10;import coil.compose.AsyncImage&#10;import coil.request.ImageRequest&#10;import com.example.composedemo.data.model.Article&#10;import com.example.composedemo.presentation.viewmodel.NewsViewModel&#10;import com.example.composedemo.presentation.viewmodel.BookmarksViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SimpleNewsScreen(&#10;    navController: NavHostController,&#10;    viewModel: NewsViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    LaunchedEffect(Unit) {&#10;        viewModel.getLatestNews()&#10;    }&#10;&#10;    Scaffold(&#10;//        topBar = {&#10;//            TopAppBar(&#10;//                title = { Text(&quot;Latest News&quot;) },&#10;//                colors = TopAppBarDefaults.topAppBarColors(&#10;//                    containerColor = MaterialTheme.colorScheme.primary,&#10;//                    titleContentColor = MaterialTheme.colorScheme.onPrimary&#10;//                )&#10;//            )&#10;//        }&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;                .padding(16.dp)&#10;        ) {&#10;            when {&#10;                uiState.isLoading -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&quot;Loading news...&quot;)&#10;                        }&#10;                    }&#10;                }&#10;&#10;                uiState.error != null -&gt; {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.errorContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;Error&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                color = MaterialTheme.colorScheme.onErrorContainer&#10;                            )&#10;                            Text(&#10;                                text = uiState.error!!,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onErrorContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Button(&#10;                                onClick = { viewModel.getLatestNews() }&#10;                            ) {&#10;                                Text(&quot;Retry&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                uiState.articles.isNotEmpty() -&gt; {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(uiState.articles) { article -&gt;&#10;                            SimpleNewsCard(&#10;                                article = article,&#10;                                onClick = {&#10;                                    // Store article in cache and navigate&#10;                                    navController.currentBackStackEntry?.savedStateHandle?.set(&quot;selected_article&quot;, article)&#10;                                    navController.navigate(&quot;article_details/${article.articleId}&quot;)&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                else -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Text(&quot;No news available&quot;)&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Button(onClick = { viewModel.getLatestNews() }) {&#10;                                Text(&quot;Refresh&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SimpleNewsCard(&#10;    article: Article,&#10;    onClick: () -&gt; Unit,&#10;    bookmarksViewModel: BookmarksViewModel = hiltViewModel()&#10;) {&#10;    val bookmarksUiState by bookmarksViewModel.uiState.collectAsStateWithLifecycle()&#10;    val isBookmarked = bookmarksUiState.bookmarkedArticles.any { it.articleId == article.articleId }&#10;    val context = LocalContext.current // Move context here, outside the onClick&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        onClick = onClick,&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column {&#10;            // Article Image&#10;            if (!article.imageUrl.isNullOrEmpty()) {&#10;                Box {&#10;                    AsyncImage(&#10;                        model = ImageRequest.Builder(context)&#10;                            .data(article.imageUrl)&#10;                            .crossfade(true)&#10;                            .build(),&#10;                        contentDescription = article.title,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(180.dp),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;&#10;                    // Bookmark button overlay&#10;                    IconButton(&#10;                        onClick = {&#10;                            if (isBookmarked) {&#10;                                bookmarksViewModel.removeBookmark(article)&#10;                            } else {&#10;                                bookmarksViewModel.addBookmark(article)&#10;                            }&#10;                        },&#10;                        modifier = Modifier.align(Alignment.TopEnd)&#10;                    ) {&#10;                        Icon(&#10;                            if (isBookmarked) Icons.Default.Bookmark else Icons.Default.BookmarkBorder,&#10;                            contentDescription = if (isBookmarked) &quot;Remove bookmark&quot; else &quot;Add bookmark&quot;,&#10;                            tint = if (isBookmarked) MaterialTheme.colorScheme.primary else androidx.compose.ui.graphics.Color.White&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Column(modifier = Modifier.padding(16.dp)) {&#10;                // Source and Category&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Surface(&#10;                        color = MaterialTheme.colorScheme.primaryContainer,&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = article.sourceId,&#10;                            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;&#10;                    if (!article.category.isNullOrEmpty()) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.secondaryContainer,&#10;                            shape = RoundedCornerShape(12.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = article.category.first(),&#10;                                modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Title&#10;                Text(&#10;                    text = article.title,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(6.dp))&#10;&#10;                // Description&#10;                if (!article.description.isNullOrEmpty()) {&#10;                    Text(&#10;                        text = article.description,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        maxLines = 3,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Date and Author&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column {&#10;                        Text(&#10;                            text = article.pubDate.take(10),&#10;                            style = MaterialTheme.typography.labelSmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;&#10;                        if (!article.creator.isNullOrEmpty()) {&#10;                            Text(&#10;                                text = &quot;By ${article.creator.first()}&quot;,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Share button - fixed context issue&#10;                    IconButton(&#10;                        onClick = {&#10;                            val shareIntent = Intent().apply {&#10;                                action = Intent.ACTION_SEND&#10;                                type = &quot;text/plain&quot;&#10;                                putExtra(Intent.EXTRA_TEXT, &quot;${article.title}\n\n${article.link}&quot;)&#10;                            }&#10;                            context.startActivity(Intent.createChooser(shareIntent, &quot;Share Article&quot;))&#10;                        }&#10;                    ) {&#10;                        Icon(&#10;                            Icons.Default.Share,&#10;                            contentDescription = &quot;Share&quot;,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.composedemo.presentation.ui&#10;&#10;import android.content.Intent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavHostController&#10;import coil.compose.AsyncImage&#10;import coil.request.ImageRequest&#10;import com.example.composedemo.data.model.Article&#10;import com.example.composedemo.presentation.viewmodel.NewsViewModel&#10;import com.example.composedemo.presentation.viewmodel.BookmarksViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SimpleNewsScreen(&#10;    navController: NavHostController,&#10;    viewModel: NewsViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    LaunchedEffect(Unit) {&#10;        viewModel.getLatestNews()&#10;    }&#10;&#10;    Scaffold(&#10;//        topBar = {&#10;//            TopAppBar(&#10;//                title = { Text(&quot;Latest News&quot;) },&#10;//                colors = TopAppBarDefaults.topAppBarColors(&#10;//                    containerColor = MaterialTheme.colorScheme.primary,&#10;//                    titleContentColor = MaterialTheme.colorScheme.onPrimary&#10;//                )&#10;//            )&#10;//        }&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;                .padding(16.dp)&#10;        ) {&#10;            when {&#10;                uiState.isLoading -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&quot;Loading news...&quot;)&#10;                        }&#10;                    }&#10;                }&#10;&#10;                uiState.error != null -&gt; {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.errorContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;Error&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                color = MaterialTheme.colorScheme.onErrorContainer&#10;                            )&#10;                            Text(&#10;                                text = uiState.error!!,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onErrorContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Button(&#10;                                onClick = { viewModel.getLatestNews() }&#10;                            ) {&#10;                                Text(&quot;Retry&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                uiState.articles.isNotEmpty() -&gt; {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(uiState.articles) { article -&gt;&#10;                            SimpleNewsCard(&#10;                                article = article,&#10;                                onClick = {&#10;                                    // Store article in cache and navigate&#10;                                    navController.currentBackStackEntry?.savedStateHandle?.set(&quot;selected_article&quot;, article)&#10;                                    navController.navigate(&quot;article_details/${article.articleId}&quot;)&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                else -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Text(&quot;No news available&quot;)&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Button(onClick = { viewModel.getLatestNews() }) {&#10;                                Text(&quot;Refresh&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SimpleNewsCard(&#10;    article: Article,&#10;    onClick: () -&gt; Unit,&#10;    bookmarksViewModel: BookmarksViewModel = hiltViewModel()&#10;) {&#10;    val bookmarksUiState by bookmarksViewModel.uiState.collectAsStateWithLifecycle()&#10;    val isBookmarked = bookmarksUiState.bookmarkedArticles.any { it.articleId == article.articleId }&#10;    val context = LocalContext.current // Move context here, outside the onClick&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        onClick = onClick,&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column {&#10;            // Article Image&#10;            if (!article.imageUrl.isNullOrEmpty()) {&#10;                Box {&#10;                    AsyncImage(&#10;                        model = ImageRequest.Builder(context)&#10;                            .data(article.imageUrl)&#10;                            .crossfade(true)&#10;                            .build(),&#10;                        contentDescription = article.title,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(180.dp),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;&#10;                    // Bookmark button overlay&#10;                    IconButton(&#10;                        onClick = {&#10;                            if (isBookmarked) {&#10;                                bookmarksViewModel.removeBookmark(article)&#10;                            } else {&#10;                                bookmarksViewModel.addBookmark(article)&#10;                            }&#10;                        },&#10;                        modifier = Modifier.align(Alignment.TopEnd)&#10;                    ) {&#10;                        Icon(&#10;                            if (isBookmarked) Icons.Default.Bookmark else Icons.Default.BookmarkBorder,&#10;                            contentDescription = if (isBookmarked) &quot;Remove bookmark&quot; else &quot;Add bookmark&quot;,&#10;                            tint = if (isBookmarked) MaterialTheme.colorScheme.primary else androidx.compose.ui.graphics.Color.White&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Column(modifier = Modifier.padding(16.dp)) {&#10;                // Source and Category&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Surface(&#10;                        color = MaterialTheme.colorScheme.primaryContainer,&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = article.sourceId,&#10;                            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;&#10;                    if (!article.category.isNullOrEmpty()) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.secondaryContainer,&#10;                            shape = RoundedCornerShape(12.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = article.category.first(),&#10;                                modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Title&#10;                Text(&#10;                    text = article.title,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(6.dp))&#10;&#10;                // Description&#10;                if (!article.description.isNullOrEmpty()) {&#10;                    Text(&#10;                        text = article.description,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        maxLines = 3,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Date and Author&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column {&#10;                        Text(&#10;                            text = article.pubDate.take(10),&#10;                            style = MaterialTheme.typography.labelSmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;&#10;                        if (!article.creator.isNullOrEmpty()) {&#10;                            Text(&#10;                                text = &quot;By ${article.creator.first()}&quot;,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Share button - fixed context issue&#10;                    IconButton(&#10;                        onClick = {&#10;                            val shareIntent = Intent().apply {&#10;                                action = Intent.ACTION_SEND&#10;                                type = &quot;text/plain&quot;&#10;                                putExtra(Intent.EXTRA_TEXT, &quot;${article.title}\n\n${article.link}&quot;)&#10;                            }&#10;                            context.startActivity(Intent.createChooser(shareIntent, &quot;Share Article&quot;))&#10;                        }&#10;                    ) {&#10;                        Icon(&#10;                            Icons.Default.Share,&#10;                            contentDescription = &quot;Share&quot;,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/presentation/ui/components/AdditionalComponents.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/presentation/ui/components/AdditionalComponents.kt" />
              <option name="originalContent" value="package com.example.composedemo.presentation.ui.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.airbnb.lottie.compose.*&#10;import com.valentinilk.shimmer.shimmer&#10;&#10;@Composable&#10;fun EnhancedErrorCard(&#10;    error: String,&#10;    onRetry: () -&gt; Unit,&#10;    strings: Map&lt;String, String&gt;&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.errorContainer&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.ErrorOutline,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.error&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Text(&#10;                text = strings[&quot;error_occurred&quot;] ?: &quot;Oops! Something went wrong&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onErrorContainer,&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = error,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onErrorContainer,&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            Row(&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                OutlinedButton(&#10;                    onClick = { /* Handle report issue */ },&#10;                    colors = ButtonDefaults.outlinedButtonColors(&#10;                        contentColor = MaterialTheme.colorScheme.error&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Report,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&quot;Report&quot;)&#10;                }&#10;&#10;                Button(&#10;                    onClick = onRetry,&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.error&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Refresh,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(strings[&quot;retry&quot;] ?: &quot;Try Again&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EmptyNewsState(&#10;    onRefresh: () -&gt; Unit,&#10;    strings: Map&lt;String, String&gt;&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Article,&#10;            contentDescription = null,&#10;            modifier = Modifier.size(120.dp),&#10;            tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Text(&#10;            text = strings[&quot;no_news&quot;] ?: &quot;No news available&quot;,&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = &quot;Pull down to refresh or check your internet connection&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        Button(&#10;            onClick = onRefresh,&#10;            modifier = Modifier.fillMaxWidth(0.6f)&#10;        ) {&#10;            Icon(&#10;                Icons.Default.Refresh,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(strings[&quot;refresh&quot;] ?: &quot;Refresh&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ShimmerMagazineView() {&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentPadding = PaddingValues(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        items(6) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                repeat(2) {&#10;                    ShimmerMagazineItem(&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ShimmerMagazineItem(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.shimmer(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp)&#10;                    .clip(RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp))&#10;                    .shimmer()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .clip(RoundedCornerShape(8.dp))&#10;                        .shimmer()&#10;                )&#10;            }&#10;&#10;            Column(modifier = Modifier.padding(12.dp)) {&#10;                repeat(3) { index -&gt;&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth(if (index == 2) 0.7f else 1f)&#10;                            .height(12.dp)&#10;                            .clip(RoundedCornerShape(6.dp))&#10;                            .shimmer()&#10;                    )&#10;                    if (index &lt; 2) Spacer(modifier = Modifier.height(6.dp))&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Box(&#10;                    modifier = Modifier&#10;                        .width(60.dp)&#10;                        .height(10.dp)&#10;                        .clip(RoundedCornerShape(5.dp))&#10;                        .shimmer()&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun LoadingAnimation() {&#10;    val composition by rememberLottieComposition(&#10;        LottieCompositionSpec.Asset(&quot;loading_animation.json&quot;)&#10;    )&#10;    val progress by animateLottieCompositionAsState(&#10;        composition,&#10;        iterations = LottieConstants.IterateForever&#10;    )&#10;&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        LottieAnimation(&#10;            composition = composition,&#10;            progress = { progress },&#10;            modifier = Modifier.size(200.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun NetworkStatusIndicator(&#10;    isOnline: Boolean&#10;) {&#10;    if (!isOnline) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp, vertical = 8.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.errorContainer&#10;            )&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.WifiOff,&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.onErrorContainer&#10;                )&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;                Text(&#10;                    text = &quot;No internet connection&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onErrorContainer&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BookmarksFloatingButton(&#10;    onClick: () -&gt; Unit,&#10;    bookmarksCount: Int = 0&#10;) {&#10;    FloatingActionButton(&#10;        onClick = onClick,&#10;        containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;    ) {&#10;        Box {&#10;            Icon(&#10;                Icons.Default.Bookmark,&#10;                contentDescription = &quot;Bookmarks&quot;&#10;            )&#10;&#10;            if (bookmarksCount &gt; 0) {&#10;                Badge(&#10;                    modifier = Modifier.align(Alignment.TopEnd),&#10;                    containerColor = MaterialTheme.colorScheme.error&#10;                ) {&#10;                    Text(&#10;                        text = if (bookmarksCount &gt; 99) &quot;99+&quot; else bookmarksCount.toString(),&#10;                        style = MaterialTheme.typography.labelSmall&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ReadingProgressIndicator(&#10;    progress: Float,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    LinearProgressIndicator(&#10;        progress = progress,&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .height(4.dp),&#10;        color = MaterialTheme.colorScheme.primary,&#10;        trackColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.1f)&#10;    )&#10;}&#10;&#10;@Composable&#10;fun CategoryChips(&#10;    categories: List&lt;String&gt;,&#10;    selectedCategory: String?,&#10;    onCategorySelected: (String?) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    LazyRow(&#10;        modifier = modifier,&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;        contentPadding = PaddingValues(horizontal = 16.dp)&#10;    ) {&#10;        item {&#10;            FilterChip(&#10;                onClick = { onCategorySelected(null) },&#10;                label = { Text(&quot;All&quot;) },&#10;                selected = selectedCategory == null,&#10;                leadingIcon = if (selectedCategory == null) {&#10;                    {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Check,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                } else null&#10;            )&#10;        }&#10;&#10;        items(categories.size) { index -&gt;&#10;            val category = categories[index]&#10;            FilterChip(&#10;                onClick = { onCategorySelected(category) },&#10;                label = { Text(category.replaceFirstChar { it.uppercase() }) },&#10;                selected = selectedCategory == category,&#10;                leadingIcon = if (selectedCategory == category) {&#10;                    {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Check,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                } else null&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.composedemo.presentation.ui.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.airbnb.lottie.compose.*&#10;import com.valentinilk.shimmer.shimmer&#10;&#10;@Composable&#10;fun EnhancedErrorCard(&#10;    error: String,&#10;    onRetry: () -&gt; Unit,&#10;    strings: Map&lt;String, String&gt;&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.errorContainer&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.ErrorOutline,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.error&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Text(&#10;                text = strings[&quot;error_occurred&quot;] ?: &quot;Oops! Something went wrong&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onErrorContainer,&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = error,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onErrorContainer,&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            Row(&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                OutlinedButton(&#10;                    onClick = { /* Handle report issue */ },&#10;                    colors = ButtonDefaults.outlinedButtonColors(&#10;                        contentColor = MaterialTheme.colorScheme.error&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Report,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&quot;Report&quot;)&#10;                }&#10;&#10;                Button(&#10;                    onClick = onRetry,&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.error&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Refresh,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(strings[&quot;retry&quot;] ?: &quot;Try Again&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EmptyNewsState(&#10;    onRefresh: () -&gt; Unit,&#10;    strings: Map&lt;String, String&gt;&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Article,&#10;            contentDescription = null,&#10;            modifier = Modifier.size(120.dp),&#10;            tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Text(&#10;            text = strings[&quot;no_news&quot;] ?: &quot;No news available&quot;,&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = &quot;Pull down to refresh or check your internet connection&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        Button(&#10;            onClick = onRefresh,&#10;            modifier = Modifier.fillMaxWidth(0.6f)&#10;        ) {&#10;            Icon(&#10;                Icons.Default.Refresh,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(strings[&quot;refresh&quot;] ?: &quot;Refresh&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ShimmerMagazineView() {&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentPadding = PaddingValues(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        items(6) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                repeat(2) {&#10;                    ShimmerMagazineItem(&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ShimmerMagazineItem(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.shimmer(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp)&#10;                    .clip(RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp))&#10;                    .shimmer()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .clip(RoundedCornerShape(8.dp))&#10;                        .shimmer()&#10;                )&#10;            }&#10;&#10;            Column(modifier = Modifier.padding(12.dp)) {&#10;                repeat(3) { index -&gt;&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth(if (index == 2) 0.7f else 1f)&#10;                            .height(12.dp)&#10;                            .clip(RoundedCornerShape(6.dp))&#10;                            .shimmer()&#10;                    )&#10;                    if (index &lt; 2) Spacer(modifier = Modifier.height(6.dp))&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Box(&#10;                    modifier = Modifier&#10;                        .width(60.dp)&#10;                        .height(10.dp)&#10;                        .clip(RoundedCornerShape(5.dp))&#10;                        .shimmer()&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun LoadingAnimation() {&#10;    val composition by rememberLottieComposition(&#10;        LottieCompositionSpec.Asset(&quot;loading_animation.json&quot;)&#10;    )&#10;    val progress by animateLottieCompositionAsState(&#10;        composition,&#10;        iterations = LottieConstants.IterateForever&#10;    )&#10;&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        LottieAnimation(&#10;            composition = composition,&#10;            progress = { progress },&#10;            modifier = Modifier.size(200.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun NetworkStatusIndicator(&#10;    isOnline: Boolean&#10;) {&#10;    if (!isOnline) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp, vertical = 8.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.errorContainer&#10;            )&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.WifiOff,&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.onErrorContainer&#10;                )&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;                Text(&#10;                    text = &quot;No internet connection&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onErrorContainer&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BookmarksFloatingButton(&#10;    onClick: () -&gt; Unit,&#10;    bookmarksCount: Int = 0&#10;) {&#10;    FloatingActionButton(&#10;        onClick = onClick,&#10;        containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;    ) {&#10;        Box {&#10;            Icon(&#10;                Icons.Default.Bookmark,&#10;                contentDescription = &quot;Bookmarks&quot;&#10;            )&#10;&#10;            if (bookmarksCount &gt; 0) {&#10;                Badge(&#10;                    modifier = Modifier.align(Alignment.TopEnd),&#10;                    containerColor = MaterialTheme.colorScheme.error&#10;                ) {&#10;                    Text(&#10;                        text = if (bookmarksCount &gt; 99) &quot;99+&quot; else bookmarksCount.toString(),&#10;                        style = MaterialTheme.typography.labelSmall&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ReadingProgressIndicator(&#10;    progress: Float,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    LinearProgressIndicator(&#10;        progress = progress,&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .height(4.dp),&#10;        color = MaterialTheme.colorScheme.primary,&#10;        trackColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.1f)&#10;    )&#10;}&#10;&#10;@Composable&#10;fun CategoryChips(&#10;    categories: List&lt;String&gt;,&#10;    selectedCategory: String?,&#10;    onCategorySelected: (String?) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    LazyRow(&#10;        modifier = modifier,&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;        contentPadding = PaddingValues(horizontal = 16.dp)&#10;    ) {&#10;        item {&#10;            FilterChip(&#10;                onClick = { onCategorySelected(null) },&#10;                label = { Text(&quot;All&quot;) },&#10;                selected = selectedCategory == null,&#10;                leadingIcon = if (selectedCategory == null) {&#10;                    {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Check,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                } else null&#10;            )&#10;        }&#10;&#10;        items(categories.size) { index -&gt;&#10;            val category = categories[index]&#10;            FilterChip(&#10;                onClick = { onCategorySelected(category) },&#10;                label = { Text(category.replaceFirstChar { it.uppercase() }) },&#10;                selected = selectedCategory == category,&#10;                leadingIcon = if (selectedCategory == category) {&#10;                    {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Check,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                } else null&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/presentation/viewmodel/ArticleDetailsViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/composedemo/presentation/viewmodel/ArticleDetailsViewModel.kt" />
              <option name="originalContent" value="package com.example.composedemo.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.composedemo.data.model.Article&#10;import com.example.composedemo.data.repository.NewsRepository&#10;import com.example.composedemo.data.local.ArticleCache&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ArticleDetailsViewModel @Inject constructor(&#10;    private val newsRepository: NewsRepository,&#10;    private val articleCache: ArticleCache&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(ArticleDetailsUiState())&#10;    val uiState: StateFlow&lt;ArticleDetailsUiState&gt; = _uiState.asStateFlow()&#10;&#10;    fun getArticleDetails(articleId: String) {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, error = null)&#10;&#10;            // First check cache&#10;            val cachedArticle = articleCache.getArticle(articleId)&#10;            if (cachedArticle != null) {&#10;                println(&quot;ArticleDetailsViewModel: Found article in cache: ${cachedArticle.title}&quot;)&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    article = cachedArticle,&#10;                    error = null&#10;                )&#10;                searchRelatedArticles(cachedArticle.keywords)&#10;                return@launch&#10;            }&#10;&#10;            // If not in cache, search all cached articles&#10;            val allCached = articleCache.getAllCachedArticles()&#10;            val article = allCached.find { it.articleId == articleId }&#10;&#10;            if (article != null) {&#10;                println(&quot;ArticleDetailsViewModel: Found article in all cached: ${article.title}&quot;)&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    article = article,&#10;                    error = null&#10;                )&#10;                searchRelatedArticles(article.keywords)&#10;            } else {&#10;                println(&quot;ArticleDetailsViewModel: Article not found in cache, ID: $articleId&quot;)&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    error = &quot;Article not found. Please go back and try again.&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    fun setArticle(article: Article) {&#10;        _uiState.value = _uiState.value.copy(&#10;            isLoading = false,&#10;            article = article,&#10;            error = null&#10;        )&#10;        searchRelatedArticles(article.keywords)&#10;    }&#10;&#10;    fun searchRelatedArticles(keywords: List&lt;String&gt;?) {&#10;        if (keywords.isNullOrEmpty()) return&#10;&#10;        viewModelScope.launch {&#10;            try {&#10;                val searchQuery = keywords.joinToString(&quot; &quot;)&#10;                newsRepository.getLatestNews(query = searchQuery, size = 5).collect { result -&gt;&#10;                    result.fold(&#10;                        onSuccess = { newsResponse -&gt;&#10;                            _uiState.value = _uiState.value.copy(&#10;                                relatedArticles = newsResponse.results&#10;                            )&#10;                        },&#10;                        onFailure = { /* Handle silently for related articles */ }&#10;                    )&#10;                }&#10;            } catch (e: Exception) {&#10;                // Handle silently for related articles&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class ArticleDetailsUiState(&#10;    val isLoading: Boolean = false,&#10;    val article: Article? = null,&#10;    val relatedArticles: List&lt;Article&gt; = emptyList(),&#10;    val error: String? = null&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.composedemo.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.composedemo.data.model.Article&#10;import com.example.composedemo.data.repository.NewsRepository&#10;import com.example.composedemo.data.local.ArticleCache&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ArticleDetailsViewModel @Inject constructor(&#10;    private val newsRepository: NewsRepository,&#10;    private val articleCache: ArticleCache&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(ArticleDetailsUiState())&#10;    val uiState: StateFlow&lt;ArticleDetailsUiState&gt; = _uiState.asStateFlow()&#10;&#10;    fun getArticleDetails(articleId: String) {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, error = null)&#10;&#10;            // First check cache&#10;            val cachedArticle = articleCache.getArticle(articleId)&#10;            if (cachedArticle != null) {&#10;                println(&quot;ArticleDetailsViewModel: Found article in cache: ${cachedArticle.title}&quot;)&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    article = cachedArticle,&#10;                    error = null&#10;                )&#10;                searchRelatedArticles(cachedArticle.keywords)&#10;                return@launch&#10;            }&#10;&#10;            // If not in cache, search all cached articles&#10;            val allCached = articleCache.getAllCachedArticles()&#10;            val article = allCached.find { it.articleId == articleId }&#10;&#10;            if (article != null) {&#10;                println(&quot;ArticleDetailsViewModel: Found article in all cached: ${article.title}&quot;)&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    article = article,&#10;                    error = null&#10;                )&#10;                searchRelatedArticles(article.keywords)&#10;            } else {&#10;                println(&quot;ArticleDetailsViewModel: Article not found in cache, ID: $articleId&quot;)&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    error = &quot;Article not found. Please go back and try again.&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    fun setArticle(article: Article) {&#10;        _uiState.value = _uiState.value.copy(&#10;            isLoading = false,&#10;            article = article,&#10;            error = null&#10;        )&#10;        searchRelatedArticles(article.keywords)&#10;    }&#10;&#10;    fun searchRelatedArticles(keywords: List&lt;String&gt;?) {&#10;        if (keywords.isNullOrEmpty()) return&#10;&#10;        viewModelScope.launch {&#10;            try {&#10;                val searchQuery = keywords.joinToString(&quot; &quot;)&#10;                newsRepository.getLatestNews(query = searchQuery, size = 5).collect { result -&gt;&#10;                    result.fold(&#10;                        onSuccess = { newsResponse -&gt;&#10;                            _uiState.value = _uiState.value.copy(&#10;                                relatedArticles = newsResponse.results&#10;                            )&#10;                        },&#10;                        onFailure = { /* Handle silently for related articles */ }&#10;                    )&#10;                }&#10;            } catch (e: Exception) {&#10;                // Handle silently for related articles&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class ArticleDetailsUiState(&#10;    val isLoading: Boolean = false,&#10;    val article: Article? = null,&#10;    val relatedArticles: List&lt;Article&gt; = emptyList(),&#10;    val error: String? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values-v27/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values-v27/themes.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;&#10;    &lt;style name=&quot;Theme.ComposeDemo&quot; parent=&quot;Theme.Material3.DynamicColors.DayNight&quot;&gt;&#10;        &lt;!-- Enable edge-to-edge for API 27+ --&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:navigationBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightNavigationBar&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:enforceStatusBarContrast&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:enforceNavigationBarContrast&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowTranslucentStatus&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowTranslucentNavigation&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:fitsSystemWindows&quot;&gt;false&lt;/item&gt;&#10;        &#10;        &lt;!-- For API 27+ - Better edge-to-edge --&gt;&#10;        &lt;item name=&quot;android:windowLayoutInDisplayCutoutMode&quot;&gt;shortEdges&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;&#10;    &lt;style name=&quot;Theme.ComposeDemo&quot; parent=&quot;Theme.Material3.DynamicColors.DayNight&quot;&gt;&#10;        &lt;!-- Enable edge-to-edge for API 27+ --&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:navigationBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightNavigationBar&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:enforceStatusBarContrast&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:enforceNavigationBarContrast&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowTranslucentStatus&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowTranslucentNavigation&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:fitsSystemWindows&quot;&gt;false&lt;/item&gt;&#10;        &#10;        &lt;!-- For API 27+ - Better edge-to-edge --&gt;&#10;        &lt;item name=&quot;android:windowLayoutInDisplayCutoutMode&quot;&gt;shortEdges&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values-v29/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values-v29/themes.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;&#10;        &lt;style name=&quot;Theme.ComposeDemo&quot; parent=&quot;Theme.Material3.DynamicColors.DayNight&quot;&gt;&#10;                &lt;!-- Set status bar to use primary color, NOT transparent --&gt;&#10;                &lt;item name=&quot;android:statusBarColor&quot;&gt;?attr/colorPrimary&lt;/item&gt;&#10;                &lt;item name=&quot;android:navigationBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;                &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;false&lt;/item&gt;&#10;                &lt;item name=&quot;android:windowLightNavigationBar&quot;&gt;true&lt;/item&gt;&#10;&#10;                &lt;!-- For API 29+ - Enhanced edge-to-edge --&gt;&#10;                &lt;item name=&quot;android:windowLayoutInDisplayCutoutMode&quot;&gt;shortEdges&lt;/item&gt;&#10;                &lt;item name=&quot;android:windowSplashScreenBackground&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;                &lt;item name=&quot;android:isLightTheme&quot;&gt;false&lt;/item&gt;&#10;        &lt;/style&gt;&#10;&#10;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;&#10;        &lt;style name=&quot;Theme.ComposeDemo&quot; parent=&quot;Theme.Material3.DynamicColors.DayNight&quot;&gt;&#10;                &lt;!-- Set status bar to use primary color, NOT transparent --&gt;&#10;                &lt;item name=&quot;android:statusBarColor&quot;&gt;?attr/colorPrimary&lt;/item&gt;&#10;                &lt;item name=&quot;android:navigationBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;                &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;false&lt;/item&gt;&#10;                &lt;item name=&quot;android:windowLightNavigationBar&quot;&gt;true&lt;/item&gt;&#10;&#10;                &lt;!-- For API 29+ - Enhanced edge-to-edge --&gt;&#10;                &lt;item name=&quot;android:windowLayoutInDisplayCutoutMode&quot;&gt;shortEdges&lt;/item&gt;&#10;                &lt;item name=&quot;android:windowSplashScreenBackground&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;                &lt;item name=&quot;android:isLightTheme&quot;&gt;false&lt;/item&gt;&#10;        &lt;/style&gt;&#10;&#10;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/themes.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;style name=&quot;Theme.ComposeDemo&quot; parent=&quot;Theme.Material3.DynamicColors.DayNight&quot;&gt;&#10;        &lt;!-- Set status bar to use primary color, NOT transparent --&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/md_theme_primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;?attr/colorPrimary&lt;/item&gt;&#10;        &lt;item name=&quot;android:navigationBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightNavigationBar&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:enforceStatusBarContrast&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:enforceNavigationBarContrast&quot;&gt;false&lt;/item&gt;&#10;&#10;        &lt;!-- Additional flags for better edge-to-edge support --&gt;&#10;        &lt;item name=&quot;android:windowTranslucentStatus&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowTranslucentNavigation&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:fitsSystemWindows&quot;&gt;false&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;style name=&quot;Theme.ComposeDemo&quot; parent=&quot;Theme.Material3.DynamicColors.DayNight&quot;&gt;&#10;        &lt;!-- Set status bar to use primary color, NOT transparent --&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/md_theme_primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;?attr/colorPrimary&lt;/item&gt;&#10;        &lt;item name=&quot;android:navigationBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightNavigationBar&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:enforceStatusBarContrast&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:enforceNavigationBarContrast&quot;&gt;false&lt;/item&gt;&#10;&#10;        &lt;!-- Additional flags for better edge-to-edge support --&gt;&#10;        &lt;item name=&quot;android:windowTranslucentStatus&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowTranslucentNavigation&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:fitsSystemWindows&quot;&gt;false&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.compose) apply false&#10;    alias(libs.plugins.dagger.hilt.android) apply false&#10;}" />
              <option name="updatedContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.compose) apply false&#10;    alias(libs.plugins.dagger.hilt.android) apply false&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>